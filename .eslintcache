[{"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/routes.js":"1","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/index.js":"2","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/services/api.js":"3","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/App.js":"4","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/pages/main.js":"5","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/components/Container/index.js":"6","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/pages/admin.js":"7","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/components/Historic/index.js":"8"},{"size":395,"mtime":1606319668106,"results":"9","hashOfConfig":"10"},{"size":197,"mtime":1606234753925,"results":"11","hashOfConfig":"10"},{"size":139,"mtime":1606398150322,"results":"12","hashOfConfig":"10"},{"size":180,"mtime":1606318443620,"results":"13","hashOfConfig":"10"},{"size":2467,"mtime":1606430394444,"results":"14","hashOfConfig":"10"},{"size":1234,"mtime":1606320339482,"results":"15","hashOfConfig":"10"},{"size":7880,"mtime":1606430339317,"results":"16","hashOfConfig":"10"},{"size":1331,"mtime":1606419524280,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"lrlkwo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/routes.js",[],["39","40"],"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/index.js",[],["41","42"],"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/services/api.js",[],["43","44"],"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/App.js",[],["45","46"],"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/pages/main.js",[],"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/components/Container/index.js",[],"/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/pages/admin.js",["47"],"import 'dotenv/config';\n\nimport React, { useState, useEffect } from 'react';\n\nimport api from '../services/api';\n\nimport { IoMdArrowForward } from 'react-icons/io';\nimport { GrPowerReset } from 'react-icons/gr';\nimport { AiOutlineForm } from 'react-icons/ai';\nimport { VscClose } from 'react-icons/vsc';\n\nimport Container from '../components/Container';\nimport Historic from '../components/Historic';\n\nimport imagemLogo from '../images/logo.svg';\n\nimport '../styles/admin.css';\nimport '../styles/main.css';\n\nexport default function Admin() {\n    const [players, setPlayers] = useState([]);\n    const [isLogged, setIsLogged] = useState(false);\n    const [password, setPassword] = useState('');\n    const [newMatch, setNewMatch] = useState(\"new-match-none\");\n    const [winnerName, setWinnerName] = useState('');\n    const [winnerGoals, setWinnerGoals] = useState(0);\n    const [loserName, setLoserName] = useState('');\n    const [loserGoals, setLoserGoals] = useState(0);\n\n    let localStoragePassword = '';\n\n    useEffect(() => {\n        loadPlayers();\n\n        localStoragePassword = JSON.parse(localStorage.getItem('password')) || '';\n\n        if(localStoragePassword === process.env.REACT_APP_PASSWORD) {\n            setIsLogged(true);\n        }\n    }, []);\n\n    async function loadPlayers() {\n        const response = await api.get('/players');\n\n        setPlayers(response.data);\n    }\n\n    function login() {\n        if(localStoragePassword === '') {\n            if(password === process.env.REACT_APP_PASSWORD) {\n                localStorage.setItem('password', JSON.stringify(password));\n    \n                setIsLogged(true);\n            } else {\n                window.location.href = '/';\n            }\n        }\n    }\n\n    if(isLogged === false) {\n        return(\n            <div className=\"login-admin\">\n                <form onSubmit={login}>\n                    <div className=\"logIn\">\n                        <h1>Login in</h1>\n                        <h2>Acesso apenas para admins</h2>\n                    </div>\n\n                    <input type=\"password\" placeholder=\"Insira a senha\" onChange={event => setPassword(event.target.value)} />\n                    <button type=\"button\" onClick={login}>LOGIN<IoMdArrowForward /></button>\n                </form>\n            </div>\n        );\n    }\n\n    async function reset() {\n        const wantReset = window.confirm('Deseja resetar a tabela?');\n\n        if(wantReset === true) {\n            await api.put('/reset-players');\n\n            window.location.reload();\n\n            return;\n        }\n\n        return;\n    }\n\n    async function registerNewMatch() {\n        let idWinner = '';\n        const initialsWinner = winnerName.substring(0, 3);\n        let idLoser = '';\n        const initialsLoser = loserName.substring(0, 3);\n              \n        for (const player of players) {\n            if(player.name === winnerName) {\n                idWinner = player._id;\n            } else if(player.name === loserName) {\n                idLoser = player._id;\n            }\n        }\n\n        await api.put(`/players/${idWinner}`, {\n            \"wins\": 1,\n            \"loses\": 0,\n            \"goalsScored\": parseInt(winnerGoals),\n            \"concededGoals\": parseInt(loserGoals)\n        });\n\n        await api.put(`/players/${idLoser}`, {\n            \"wins\": 0,\n            \"loses\": 1,\n            \"goalsScored\": parseInt(loserGoals),\n            \"concededGoals\": parseInt(winnerGoals)\n        });\n\n        await api.post('/match-history', {\n            \"winnerName\": initialsWinner,\n            \"winnerGoals\": winnerGoals,\n            \"loserName\": initialsLoser,\n            \"loserGoals\": loserGoals\n        });\n     \n        setNewMatch(\"new-match-none\");\n        window.location.reload();\n    }\n\n    return(\n        <div className=\"main\">\n            <Container />\n\n            <div id=\"championship-infos\" className=\"championship-infos\">\n                <img src={imagemLogo} alt=\"Rocket League\" />\n\n                <button className=\"reset\" onClick={reset}>\n                    <GrPowerReset size={20} color='white' />\n                </button>\n\n            <div className=\"table\">\n                <table className=\"classification\">\n                    <thead>\n                    <tr>\n                        <th>CLASSIFICAÇÃO</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                    {players.map((player, index) => {\n                        let name = \"\";\n\n                        if (window.screen.width < 768) {\n                        name = player.name.substring(0, 3);\n                        } else {\n                        name = player.name;\n                        }\n\n                        return (\n                        <tr key={player._id}>\n                            <td>\n                            <h3>\n                                <p>{index + 1}</p>\n                                {name}\n                            </h3>\n                            </td>\n                        </tr>\n                        );\n                    })}\n                    </tbody>\n                </table>\n\n                <table className=\"content-table\">\n                    <thead>\n                    <tr>\n                        <th>P</th>\n                        <th>J</th>\n                        <th>V</th>\n                        <th>D</th>\n                        <th>GP</th>\n                        <th>GC</th>\n                        <th>SG</th>\n                    </tr>\n                    </thead>\n\n                    <tbody>\n                    {players.map((player) => {\n                        return (\n                        <tr key={player._id}>\n                            <td>{player.score}</td>\n                            <td>{player.gamesPlayed}</td>\n                            <td>{player.wins}</td>\n                            <td>{player.loses}</td>\n                            <td>{player.goalsScored}</td>\n                            <td>{player.concededGoals}</td>\n                            <td>{player.goalDifference}</td>\n                        </tr>\n                        );\n                    })}\n                    </tbody>\n                </table>\n            </div>\n\n                <button onClick={() => setNewMatch(\"new-match\")} className=\"register-new-match\">Cadastrar nova partida <AiOutlineForm /></button>\n\n                <div className={newMatch}>\n                    <div className=\"form-new-match\">\n                        <select onChange={event => setWinnerName(event.target.value)}>\n                            <option value=\"winner\">Vencedor</option>\n\n                            {players.map(player => {\n                                return(\n                                    <option key={player._id} value={player.name}>{player.name}</option> \n                                );\n                            })}\n                        </select>\n\n                        <input type=\"number\" onChange={event => setWinnerGoals(event.target.value)} placeholder=\"0\" />\n                        <VscClose size={20} />\n                        <input type=\"number\" onChange={event => setLoserGoals(event.target.value)} placeholder=\"0\" />\n\n                        <select onChange={event => setLoserName(event.target.value)}>\n                            <option value=\"loser\">Perdedor</option>\n\n                            {players.map(player => {\n                                return(\n                                    <option key={player._id} value={player.name}>{player.name}</option> \n                                );\n                            })}\n                        </select>\n                    </div>\n\n                    <button onClick={registerNewMatch}>CADASTRAR</button>\n                </div>\n            </div>\n\n            <Historic />\n        </div>\n    );\n}","/home/viiniciusgs/Documentos/Projects/tabela-campeonato/src/components/Historic/index.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"48","replacedBy":"54"},{"ruleId":"50","replacedBy":"55"},{"ruleId":"48","replacedBy":"56"},{"ruleId":"50","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":35,"column":32,"nodeType":"60","endLine":35,"endColumn":82},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],["61"],["62"],["61"],["62"],"react-hooks/exhaustive-deps","Assignments to the 'localStoragePassword' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","LogicalExpression","no-global-assign","no-unsafe-negation"]